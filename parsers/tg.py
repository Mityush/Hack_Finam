
import csv
import time
from datetime import datetime, timezone
from telethon import TelegramClient
from telethon.errors import FloodWaitError
from telethon.tl.functions.channels import GetFullChannelRequest
import asyncio
import sys

# === –í–ê–®–ò –î–ê–ù–ù–´–ï ===
api_id = 26607213
api_hash = 'febf5611110a86d33f8ca2bd755edb95'

# === –£–ö–ê–ñ–ò–¢–ï –î–ê–¢–£ –ù–ê–ß–ê–õ–ê –ü–ê–†–°–ò–ù–ì–ê (–≤ UTC!) ===
START_DATE = datetime(2022, 1, 1, tzinfo=timezone.utc)

# === –°–ü–ò–°–û–ö –ö–ê–ù–ê–õ–û–í ===
channels = [
    'markettwits',
    'cbrstocks',
    'warningbuffet',
    'tb_invest_official',
    't_analytics_official',
    'bitkogan',
    'AK47pfl',
    'centralbank_russia',
    'tass_agency',
    'rbc_news',
    'ProfitGate',
    'FatCat18',
    'usa100cks',
    'russianmacro',
    'BIoomberg',
    'smartlabnews',
    'banksta',
    'headlines_for_traders',
    'bitkogan_hotline',
    'thewallstreetpro',
    'bankrollo',
    'economica',
    'alfa_investments',
    'preemnik',
    'SberInvestments',
    'forbesrussia',
    'bezposhady',
    'lentadnya',
    'rian_ru',
    'vedomosti'
]

client = TelegramClient('session_name', api_id, api_hash)

# === –ì–õ–û–ë–ê–õ–¨–ù–´–ô –°–ï–ú–ê–§–û–† –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞ ===
# –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ Telegram (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 3‚Äì5)
MAX_CONCURRENT = 3
semaphore = asyncio.Semaphore(MAX_CONCURRENT)

# === –§–£–ù–ö–¶–ò–Ø: –ø–æ–ª—É—á–∏—Ç—å —á–∏—Å–ª–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ ===
async def get_subscribers(channel_username):
    try:
        channel = await client.get_entity(channel_username)
        full = await client(GetFullChannelRequest(channel))
        return full.full_chat.participants_count
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è {channel_username}: {e}")
        return None

# === –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ CSV ===
async def save_messages_to_csv(channel, messages, subs):
    filename = f"{channel}.csv"
    fieldnames = ['channel', 'sender_id', 'message_id', 'date', 'text', 'subs', 'views']

    def _write_csv():
        with open(filename, 'a', newline='', encoding='utf-8') as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()
            for msg in messages:
                date_str = msg.date.strftime('%Y-%m-%d %H:%M:%S')
                writer.writerow({
                    'channel': channel,
                    'message_id': msg.id,
                    'sender_id': msg.sender_id,
                    'date': date_str,
                    'text': msg.text or '',
                    'subs': subs,
                    'views': msg.views
                })

    await asyncio.to_thread(_write_csv)
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {filename}")

# === –§–£–ù–ö–¶–ò–Ø: —Å–æ–±—Ä–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞—Ç—ã (—Å –∑–∞—â–∏—Ç–æ–π —Å–µ–º–∞—Ñ–æ—Ä–æ–º) ===
async def fetch_and_save_channel(channel):
    filename = f"{channel}.csv"

    min_id = 10000000000000
    try:
        with open(filename, 'r', newline='', encoding='utf-8') as csvfile:
            reader = csv.DictReader(csvfile)  # fieldnames –Ω–µ –Ω—É–∂–Ω—ã, –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
            rows = list(reader)
            if rows:
                min_id = min(int(r.get("message_id", 0)) for r in rows if r.get("message_id") and r["message_id"].isdigit())
    except Exception as e:
        pass
    async with semaphore:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º
        print(f"\nüì• –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–Ω–∞–ª–∞: {channel} c —Å–æ–æ–±—â–µ–Ω–∏—è {min_id}")
        subs = await get_subscribers(channel)
    messages = []
    i = 0
    try:
        async for message in client.iter_messages(channel):
            if message.id > min_id:
                continue
            i += 1
            if i % 1000 == 0:
                print(f"{channel}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i} —Å–æ–æ–±—â–µ–Ω–∏–π")
                await save_messages_to_csv(channel, messages, subs)
                messages.clear()

            if message.date < START_DATE:
                break
            messages.append(message)

    except FloodWaitError as e:
        print(f"‚è≥ FloodWait –≤ {channel}: –∂–¥—ë–º {e.seconds} —Å–µ–∫—É–Ω–¥...")
        await asyncio.sleep(e.seconds)
        # –ü–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–µ—Ä—ã–≤–∞–µ–º
        return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {channel}: {e}")
        return

    if not messages:
        print(f"‚ÑπÔ∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {channel} —Å {START_DATE.date()}")
        return

